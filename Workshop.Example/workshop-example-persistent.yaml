---
##################
# BEGIN TEMPLATE #
##################
  kind: "Template"
  apiVersion: "v1"
  metadata: 
    name: "workshop-persistent"
    annotations: 
      description: "An example ToDo List Application with a MySQL Database"
      tags: "quickstart,instant-app,jboss,mysql,workshop,kermit"
      iconClass: "icon-jboss"
  labels: 
    template: "workshop-persistent"
  objects:
###################
# Layer 2: Images #
###################	  	  
    - kind: "ImageStream"
      apiVersion: "v1"
      metadata: 
        name: "${APPLICATION_NAME}"
        annotations: 
          description: "Keeps track of changes in the application image"
        labels:
          name: "${APPLICATION_NAME}"
        spec:
          dockerImageRepository: {}
        tags:
          name: latest
########################
# Layer 3: Deployments #
########################
########################
####### FrontEnd #######
########################
    - kind: "DeploymentConfig"
      apiVersion: "v1"
      metadata: 
        name: "${APPLICATION_NAME}"
        annotations: 
          description: "Defines how to deploy the application server"
        labels:
          name: "${APPLICATION_NAME}"
      spec:
        replicas: 1
        selector:
          name: "${APPLICATION_NAME}"
        strategy: 
          type: "Rolling"
        template:
          metadata:
            name: "${APPLICATION_NAME}"
            labels: 
              name: "${APPLICATION_NAME}"
          spec:
            containers:
            - name: "${APPLICATION_NAME}"
              image: "${APPLICATION_NAME}"
              ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
              env: 
                - name: "MYSQL_USER"
                  value: "${DATABASE_USER}"
                - name: "MYSQL_PASSWORD"
                  value: "${DATABASE_PASSWORD}"
                - name: "MYSQL_DATABASE"
                  value: "${DATABASE_NAME}"
              resources: {}
              terminationMessagePath: "/dev/termination-log"
              securityContext:
                capabilities: {}
                privileged: false
              restartPolicy: "Always"
              dnsPolicy: "ClusterFirst"
        triggers: 
          - type: "ImageChange"
            imageChangeParams: 
              automatic: true
              containerNames: 
                - "${APPLICATION_NAME}"
              from: 
                kind: "ImageStreamTag"
                name: "${APPLICATION_NAME}:latest"
          - type: "ConfigChange"
########################
####### BackEnd ########
########################           
    - kind: "DeploymentConfig"
      apiVersion: "v1"
      metadata: 
        name: "${DATABASE_SERVICE_NAME}"
        annotations: 
          description: "Defines how to deploy the database"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        replicas: 1
        selector: 
          name: "${DATABASE_SERVICE_NAME}"
        strategy: 
          type: "Recreate"
        template: 
          metadata: 
            name: "${DATABASE_SERVICE_NAME}"
            labels: 
              name: "${DATABASE_SERVICE_NAME}"
          spec: 
            containers: 
              - name: "mysql"
                image: " "
                ports: 
                  - containerPort: 3306
                readinessProbe: 
                  timeoutSeconds: 1
                  initialDelaySeconds: 5
                  exec: 
                    command: 
                      - "/bin/sh"
                      - "-i"
                      - "-c"
                      - "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                livenessProbe: 
                  timeoutSeconds: 1
                  initialDelaySeconds: 30
                  tcpSocket: 
                    port: 3306
                env: 
                  - name: "MYSQL_USER"
                    value: "${DATABASE_USER}"
                  - name: "MYSQL_PASSWORD"
                    value: "${DATABASE_PASSWORD}"
                  - name: "MYSQL_DATABASE"
                    value: "${DATABASE_NAME}"
                volumeMounts: 
                  - name: "${DATABASE_SERVICE_NAME}-volume"
                    mountPath: "/var/lib/mysql/data"
            volumes: 
              - name: "${DATABASE_SERVICE_NAME}-volume"
                persistentVolumeClaim:
                  claimName: "${DATABASE_SERVICE_NAME}-pvc"
        triggers: 
          - type: "ImageChange"
            imageChangeParams: 
              automatic: true
              containerNames: 
                - "mysql"
              from: 
                kind: "ImageStreamTag"
                namespace: "openshift"
                name: "mysql:5.6"
          - type: "ConfigChange"
#########################
# Layer 4: Abstractions #
#########################
########################
### Service FrontEnd ###
######################## 
    - kind: "Service"
      apiVersion: "v1"
      metadata: 
        name: "${APPLICATION_NAME}"
        annotations: 
          description: "Exposes and load balances the application pods"
        labels:
          name: "${APPLICATION_NAME}"
      spec: 
        ports:
          - name: "app-port"
            port: 8080
            protocol: TCP
            targetPort: 8080
          - name: "app-port-secure"
            port: 8443
            protocol: TCP
            targetPort: 8443
        selector: 
          name: "${APPLICATION_NAME}"
########################
### Service BackEnd ####
########################          
    - kind: "Service"
      apiVersion: "v1"
      metadata: 
        name: "${DATABASE_SERVICE_NAME}"
        annotations: 
          description: "Exposes the database server"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec: 
        ports: 
          - name: "db-port"
            port: 3306
            targetPort: 3306
        selector: 
          deploymentConfig: "${DATABASE_SERVICE_NAME}"
########################
######## Route #########
########################    
    - kind: "Route"
      apiVersion: "v1"
      metadata: 
        name: "${APPLICATION_NAME}"
        annotations: 
          description: "Route for application's service"
        labels:
          name: "${APPLICATION_NAME}"
      spec: 
        host: ""
        port:
          targetPort: 8080
        to: 
          kind: "Service"
          name: "${APPLICATION_NAME}"
########################
######### PVC #########
########################           
    - kind: "PersistentVolumeClaim"
      apiVersion: "v1"
      metadata:
        name: "${DATABASE_SERVICE_NAME}-pvc"
        annotations: 
          description: "creates an persistent volume claim"
        labels:
          application: "${DATABASE_SERVICE_NAME}"
      spec: 
        accessModes: 
          - "ReadWriteMany" 
        resources:
          requests:
            storage: "${VOLUME_CAPACITY}"
###################
# Layer 1: Builds #
###################
    - kind: "BuildConfig"
      apiVersion: "v1"
      metadata: 
        name: "${APPLICATION_NAME}"
        annotations: 
          description: "Defines how to build the application"
      labels:
        name: "${APPLICATION_NAME}"
      spec: 
        source: 
          type: "Git"
          git: 
            uri: "${SOURCE_REPOSITORY_URL}"
            ref: "master"
            contextDir: "${SOURCE_REPOSITORY_CONTEXT}"
        strategy: 
          type: "Source"
          sourceStrategy:
            from: 
              kind: "ImageStreamTag"
              namespace: "openshift"
              name: "jboss-webserver30-tomcat7-openshift:latest"
            env:
              - name: MAVEN_ARGS_APPEND
                value: 'package -Popenshift -DskipTest -s settings.xml'
        output: 
          to: 
            kind: "ImageStreamTag"
            name: "${APPLICATION_NAME}:latest"
        triggers: 
          - type: "ImageChange"
            imageChange: {}
          - type: "ConfigChange"
            configChange: {}
          - type: "GitHub"
            github: 
              secret: "${WEBHOOK_SECRET}"
          - type: "Generic"
            generic: 
              secret: "${WEBHOOK_SECRET}"
##############
# Parameters #
##############
  parameters: 
    - name: "APPLICATION_NAME"
      displayName: "APPLICATION_NAME"
      description: "The name assigned to all of the objects defined in this template."
      required: true
      value: "workshop-persistent"
    - name: "SOURCE_REPOSITORY_URL"
      displayName: "Git Repository URL"
      description: "The URL of the repository with your application source code."
      value: "https://github.com/orangekmt/OpenshiftTemplates.git"
    - name: "SOURCE_REPOSITORY_CONTEXT"
      displayName: "Git Repository Context Directory"
      description: "The location inside the repository where your application source code resides."
      value: "Workshop.Example"
    - name: "WEBHOOK_SECRET"
      displayName: "Git Webhook Secret"
      description: "A secret string used to configure the Git webhook."
      generate: "expression"
      from: "[a-zA-Z0-9]{40}"
    - name: "DATABASE_SERVICE_NAME"
      displayName: "Database Service Name"
      description: "The name assigned to all of the DB objects defined in this template."
      required: true
      value: "workshop-example-mysql"
    - name: "DATABASE_NAME"
      displayName: "Database Name"
      value: "mysqldb"
    - name: "DATABASE_USER"
      displayName: "Database User"
      value: "mysql"
    - name: "DATABASE_PASSWORD"
      displayName: "Database Password"
      generate: "expression"
      from: "[a-zA-Z0-9]{16}"
    - name: "VOLUME_CAPACITY"
      displayName: "Volume Capacity"
      description: "Volume space available for data, e.g. 1Gi, 3Gi."
      value: "3Gi"
      required: true
